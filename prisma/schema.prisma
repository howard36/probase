generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  authors       Author[]
  problems      Problem[]
  permissions   Permission[]
  invites       Invite[]
  comments      Comment[]
  problemLikes  ProblemLike[]
  solveAttempts SolveAttempt[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id           Int        @id @default(autoincrement())
  displayName  String
  country      String?
  user         User?      @relation(fields: [userId], references: [id])
  userId       String?
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int
  problems     Problem[]
  solutions    Solution[]
}

enum Subject {
  Algebra
  Combinatorics
  Geometry
  NumberTheory
}

model Problem {
  id            Int        @id @default(autoincrement())
  collection    Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId  Int
  pid           String
  title         String
  statement     String     @db.Text
  submitter     User?      @relation(fields: [submitterId], references: [id])
  submitterId   String?
  authors       Author[]
  answer        String?
  solutions     Solution[]
  subject       Subject
  difficulty    Int?  // 1-5: very easy, easy, medium, hard, very hard
  source        String?
  isAnonymous   Boolean
  comments      Comment[]
  createdAt     DateTime   @default(now())
  testProblems  TestProblem[]
  isArchived    Boolean    @default(false)
  likes         ProblemLike[]
  solveAttempts SolveAttempt[]
  
  @@unique([collectionId, pid])
}

model Solution {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  summary   String?
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
  authors   Author[]
}

enum AnswerFormat {
  Proof
  ShortAnswer
  Integer
  AIME
}

model Collection {
  id                 Int           @id @default(autoincrement())
  name               String
  cid                String        @unique
  problems           Problem[]
  authors            Author[]
  showAuthors        Boolean
  permissions        Permission[]
  invites            Invite[]
  shortAnswer        Boolean       @default(true)  // TODO: remove (replaced by answerFormat)
  tests              Test[]
  answerFormat       AnswerFormat  @default(ShortAnswer)
  requireAnswer      Boolean       @default(true)
  requireSolution    Boolean       @default(true)
  requireDifficulty  Boolean       @default(true)
  requireTestsolve   Boolean       @default(false)  // whether users must testsolve a problem to view it
  createdAt          DateTime      @default(now())
}

enum AccessLevel {
  Admin
  TeamMember
  ViewOnly
  SubmitOnly
}

enum TestsolverType {
  Serious
  Casual
}

model Permission {
  user                       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String
  collection                 Collection       @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId               Int
  accessLevel                AccessLevel      @default(TeamMember)
  createdAt                  DateTime         @default(now())
  testsolverType             TestsolverType?
  seriousTestsolverStartedAt DateTime?

  @@unique([userId, collectionId])
}

model Invite {
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int
  accessLevel  AccessLevel
  code         String     @unique
  inviter      User       @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId    String
  emailDomain  String?    @db.Text
  oneTimeUse   Boolean    @default(false)
  expiresAt    DateTime?
  createdAt    DateTime   @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
  text      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id           Int        @id @default(autoincrement())
  name         String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int
  testProblems TestProblem[]
}

model TestProblem {
  test         Test    @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId       Int
  problem      Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId    Int
  position     Int

  @@unique([testId, problemId])
  @@unique([testId, position])
}

model ProblemLike {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int

  @@id([userId, problemId])
}

model SolveAttempt {
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  problem        Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId      Int
  startedAt      DateTime  @default(now())
  solvedAt       DateTime?
  numSubmissions Int       @default(0)
  gaveUp         Boolean   @default(false)

  @@id([userId, problemId])
}